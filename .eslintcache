[{"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\index.js":"1","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\App.js":"2","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\reportWebVitals.js":"3","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\AppRouter.js":"4","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\home\\home.jsx":"5","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\payroll-form\\payroll-form.jsx":"6","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\services\\EmployeeService.js":"7","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\services\\AxiosService.js":"8","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\config\\config.js":"9","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\home\\display.jsx":"10","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\payroll-form\\update-form.jsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":356,"mtime":1611807415551,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":769,"mtime":1611915922821,"results":"16","hashOfConfig":"13"},{"size":1855,"mtime":1611816374104,"results":"17","hashOfConfig":"13"},{"size":13036,"mtime":1611910414516,"results":"18","hashOfConfig":"13"},{"size":654,"mtime":1611923395761,"results":"19","hashOfConfig":"13"},{"size":1072,"mtime":1611922908339,"results":"20","hashOfConfig":"13"},{"size":82,"mtime":1611744571555,"results":"21","hashOfConfig":"13"},{"size":2066,"mtime":1611923198499,"results":"22","hashOfConfig":"13"},{"size":12925,"mtime":1611925749538,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"9n17pv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\index.js",[],["49","50"],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\App.js",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\reportWebVitals.js",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\AppRouter.js",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\home\\home.jsx",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\payroll-form\\payroll-form.jsx",["51","52","53","54","55"],"import React from 'react';\r\nimport { useState } from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\nimport EmployeeService from '../../services/EmployeeService'\r\n\r\n//css import\r\nimport './payroll-form.css';\r\n//image imports\r\nimport profile1 from '../../assets/Ellipse -2.png';\r\nimport profile2 from '../../assets/Ellipse 1.png';\r\nimport profile3 from '../../assets/Ellipse -8.png';\r\nimport profile4 from '../../assets/Ellipse -7.png';\r\nimport logo from '../../assets/logo.png'\r\n\r\nconst employeeService = new EmployeeService();\r\nconst PayrollForm = (props) => {\r\n\r\n\r\n  \r\n  let intialValue = {\r\n      name: '',\r\n      profileArray: [\r\n          { url: profile1 },\r\n          { url: profile2 },\r\n          { url: profile3 },\r\n          { url: profile4 }\r\n      ],\r\n      allDepartment: [\r\n          'HR', 'Sales', 'Finance', 'Engineer', 'Others'\r\n      ],\r\n      departmentValue: [],\r\n      gender: '',\r\n      salary: '',\r\n      day: '01',\r\n      month: 'Jan',\r\n      year: '2021',\r\n      startDate: '',\r\n      note: '',\r\n      id: '',\r\n      profileUrl: '',\r\n      \r\n      isUpdate: false,\r\n      error: {\r\n          department: '',\r\n          name: '',\r\n          gender: '',\r\n          salary: '',\r\n          profileUrl: '',\r\n          startDate: ''\r\n      }\r\n  }\r\n  const [formValue, setForm] = useState(intialValue);\r\n\r\n  const changeValue = (event) => {\r\n      setForm({ ...formValue, [event.target.name]: event.target.value })\r\n  }\r\n  const onCheckChange = (name) => {\r\n      let index = formValue.departmentValue.indexOf(name);\r\n      let checkArray = [...formValue.departmentValue];\r\n      if (index > -1)\r\n          checkArray.splice(index, 1);\r\n\r\n      else\r\n          checkArray.push(name);\r\n      setForm({ ...formValue, departmentValue: checkArray });\r\n  }\r\n  const getChecked = (name) => {\r\n      return formValue.departmentValue && formValue.departmentValue.includes(name);\r\n  }\r\n  const validData = async () => {\r\n      let isError = false;\r\n      let error = {\r\n          department: '',\r\n          name: '',\r\n          gender: '',\r\n          salary: '',\r\n          profileUrl: '',\r\n          startDate: ''\r\n      }\r\n      if (formValue.name.length < 1) {\r\n          error.name = 'name is required field';\r\n          isError = true;\r\n      }\r\n      if (formValue.gender.length < 1) {\r\n          error.name = 'gender is required field';\r\n          isError = true;\r\n      }\r\n      if (formValue.salary.length < 1) {\r\n          error.name = 'salary is required field';\r\n          isError = true;\r\n      }\r\n      if (formValue.profileUrl.length < 1) {\r\n          error.name = 'profile is required field';\r\n          isError = true;\r\n      }\r\n      if (formValue.departmentValue.length < 1) {\r\n          error.name = 'department is required field';\r\n          isError = true;\r\n      }\r\n      await setForm({ ...formValue, error: error });\r\n      return isError;\r\n  };\r\n  const save = async (event) => {\r\n    console.log(\"hello\");\r\n      event.preventDefault();\r\n      console.log(\"save\");\r\n\r\n      if (await validData()) {\r\n          console.log('error', formValue);\r\n          return;\r\n      }\r\n      let object = {\r\n          \"name\": formValue.name,\r\n          \"profilePic\": formValue.profileUrl,\r\n          \"gender\": formValue.gender,\r\n          \"salary\": formValue.salary,\r\n          \"department\": formValue.departmentValue,\r\n          \"note\": formValue.note,\r\n          \"id\": formValue.id,\r\n          \"startDate\": formValue.day + \" \" + formValue.month + \" \" + formValue.year\r\n      }\r\n      console.log(object);\r\n\r\n      employeeService.addEmployee(object).then(data => {\r\n          console.log(data);\r\n          props.history.push('');\r\n      }).catch(err => {\r\n          console.log(\"err while Add\");\r\n      })\r\n  }\r\n  \r\n  const reset = () => {\r\n      setForm({ ...intialValue, id: formValue.id, inUpdate: formValue.isUpdate });\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"payroll-main\">\r\n        <header className=\"header-content header\">\r\n            <div className=\"logo-content\">\r\n                <img src={logo} alt=\"\" />\r\n                <div>\r\n                    <span className=\"emp-text\">EMPLOYEE</span><br />\r\n                    <span className=\"emp-text emp-payroll\">PAYROLL</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div className=\"form-content\">\r\n            <form className=\"form\" action=\"#\" onSubmit={save}>\r\n                <div className=\"form-head\">Employee Payroll form</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"name\">Name</label>\r\n                    <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name...\" />\r\n                </div>\r\n                <div className=\"error\">{formValue.error.name}</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"profileUrl\">Profile image</label>\r\n                    <div className=\"profile-radio-button\">\r\n                        <label>\r\n                            <input type=\"radio\" checked={formValue.profileUrl === '../../assets/Ellipse -3.png'} name=\"profileUrl\"\r\n                                value='../../assets/Ellipse -3.png' onChange={changeValue} />\r\n                            <img className=\"profile\" src={profile1} />\r\n                        </label>\r\n                        <label>\r\n                            <input type=\"radio\" checked={formValue.profileUrl === '../../assets/Ellipse -1.png'} name=\"profileUrl\"\r\n                                value='../../assets/Ellipse -1.png' onChange={changeValue} />\r\n                            <img className=\"profile\" src={profile2} />\r\n                        </label>\r\n                        <label>\r\n                            <input type=\"radio\" checked={formValue.profileUrl === '../../assets/Ellipse -8.png'} name=\"profileUrl\"\r\n                                value='../../assets/Ellipse -8.png' onChange={changeValue} />\r\n                            <img className=\"profile\" src={profile3} />\r\n                        </label>\r\n                        <label>\r\n                            <input type=\"radio\" checked={formValue.profileUrl === '../../assets/Ellipse -7.png'} name=\"profileUrl\"\r\n                                value='../../assets/Ellipse -7.png' onChange={changeValue} />\r\n                            <img className=\"profile\" src={profile4} />\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"error\">{formValue.error.profileUrl}</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"gender\">Gender</label>\r\n                    <div>\r\n                        <input type=\"radio\" id=\"male\" onChange={changeValue} name=\"gender\" value=\"male\" />\r\n                        <label className=\"text\" htmlFor=\"male\">Male</label>\r\n                        <input type=\"radio\" id=\"female\" onChange={changeValue} name=\"gender\" value=\"female\" />\r\n                        <label className=\"text\" htmlFor=\"female\">Female</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"error\">{formValue.error.gender}</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"department\">Department</label>\r\n                    <div>\r\n                        {formValue.allDepartment.map(item => (\r\n                            <span key={item}>\r\n                                <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\r\n\r\n                                    defaultChecked={() => getChecked(item)} value={item} />\r\n                                <label className=\"text\" htmlFor={item}>{item}</label>\r\n                            </span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"error\">{formValue.error.department}</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"salary\">Salary</label>\r\n                    <input className=\"input\" type=\"number\" onChange={changeValue} id=\"salary\" value={formValue.salary} name=\"salary\" placeholder=\"salary\" />\r\n                </div>\r\n                <div className=\"error\">{formValue.error.salary}</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\r\n                    <div>\r\n                        <select onChange={changeValue} id=\"day\" name=\"day\">\r\n                            <option value=\"01\">1</option>\r\n                            <option value=\"02\">2</option>\r\n                            <option value=\"03\">3</option>\r\n                            <option value=\"04\">4</option>\r\n                            <option value=\"05\">5</option>\r\n                            <option value=\"06\">6</option>\r\n                            <option value=\"07\">7</option>\r\n                            <option value=\"08\">8</option>\r\n                            <option value=\"09\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"11\">11</option>\r\n                            <option value=\"12\">12</option>\r\n                            <option value=\"13\">13</option>\r\n                            <option value=\"14\">14</option>\r\n                            <option value=\"15\">15</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"17\">17</option>\r\n                            <option value=\"18\">18</option>\r\n                            <option value=\"19\">19</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"21\">21</option>\r\n                            <option value=\"22\">22</option>\r\n                            <option value=\"23\">23</option>\r\n                            <option value=\"24\">25</option>\r\n                            <option value=\"26\">26</option>\r\n                            <option value=\"27\">27</option>\r\n                            <option value=\"28\">28</option>\r\n                            <option value=\"29\">29</option>\r\n                            <option value=\"30\">30</option>\r\n                            <option value=\"31\">31</option>\r\n                        </select>\r\n                        <select onChange={changeValue} id=\"month\" name=\"month\">\r\n                            <option value=\"Jan\">January</option>\r\n                            <option value=\"Feb\">February</option>\r\n                            <option value=\"Mar\">March</option>\r\n                            <option value=\"Apr\">April</option>\r\n                            <option value=\"May\">May</option>\r\n                            <option value=\"Jun\">June</option>\r\n                            <option value=\"Jul\">July</option>\r\n                            <option value=\"Aug\">August</option>\r\n                            <option value=\"Sep\">September</option>\r\n                            <option value=\"Oct\">October</option>\r\n                            <option value=\"Nov\">Novmerber</option>\r\n                            <option value=\"Dec\">December</option>\r\n                        </select>\r\n                        <select onChange={changeValue} id=\"year\" name=\"year\">\r\n                            <option value=\"2021\">2021</option>\r\n                            <option value=\"2020\">2020</option>\r\n                            <option value=\"2019\">2019</option>\r\n                            <option value=\"2018\">2018</option>\r\n                            <option value=\"2017\">2017</option>\r\n                            <option value=\"2016\">2016</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"error\">{formValue.error.startDate}</div>\r\n                <div className=\"row-content\">\r\n                    <label className=\"label text\" htmlFor=\"note\">Notes</label>\r\n                    <textarea onChange={changeValue} id=\"note\" value={formValue.note} className=\"input\" name=\"note\" placeholder=\"\"\r\n                        style={{ height: '100%' }}></textarea>\r\n                </div>\r\n                <div className=\"button-content\">\r\n        \r\n                  <a routerlink=\"/\" className=\"resetButton button cancleButton\">Cancle</a>\r\n                  <div className=\"submit-reset\">\r\n                      <button type=\"submit\" onClick={save} className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? 'Update' : 'Submit'}</button>\r\n                      <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n);\r\n}\r\n//export default PayrollForm;\r\nexport default withRouter(PayrollForm);","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\services\\EmployeeService.js",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\services\\AxiosService.js",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\config\\config.js",[],"D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\home\\display.jsx",["56"],"import { Link, withRouter } from \"react-router-dom\"\r\nimport './home.css';\r\nimport deleteIcon from '../../assets/delete-black-18dp.svg';\r\nimport editIcon from '../../assets/create-black-18dp.svg';\r\nimport profile from '../../assets/Ellipse -3.png'\r\nimport EmployeeService from \"../../services/EmployeeService\";\r\n\r\nconst service = new EmployeeService();\r\nconst Display = (props) => {\r\n\r\n  const updateEmployeeData = (data) => {\r\n    localStorage.setItem('id', data);\r\n    console.log(data);\r\n\r\n  }\r\n\r\n  const deleteEmployeeData = (empId) => {\r\n    console.log(\"Delate Operation\");\r\n    service.deleteEmployeeData(empId).then(() => {\r\n      window.location.reload();\r\n      console.log(\"deleted successfully\");\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <table id=\"table-diplay\" className=\"table\">\r\n      <tbody>\r\n        <tr key={-1}>\r\n          <th></th>\r\n          <th>Name</th>\r\n          <th>Gender</th>\r\n          <th>Department</th>\r\n          <th>Salary</th>\r\n          <th>Start Date</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n        {\r\n          props.employeeArray && props.employeeArray.map((element, ind) => (\r\n            <tr key={ind}>\r\n              <td><img className=\"profile\" src={profile} alt=\"image\" /></td>\r\n              <td>{element.employeeId}{element.name}</td>\r\n              <td>{element.gender}</td>\r\n              <td>{element.department && element.department.map(dept => (\r\n                <div className=\"dept-label\">{dept}</div>\r\n              ))}</td>\r\n              <td>{element.salary}</td>\r\n              <td>{element.startDate}</td>\r\n              { <td><img onClick={() => deleteEmployeeData(element.employeeId)} src={deleteIcon} alt=\"delete\" />\r\n                    <Link to=\"Update\">\r\n                      <img onClick={() => updateEmployeeData(element.employeeId)} src={editIcon} alt=\"edit\" />\r\n                    </Link>\r\n              \r\n                </td> }\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\nexport default withRouter(Display);","D:\\MySQL\\Spring\\Spring Demo\\React\\ReactEmployeeApp\\employeepayrollreact\\src\\components\\payroll-form\\update-form.jsx",["57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":164,"column":29,"nodeType":"64","endLine":164,"endColumn":71},{"ruleId":"62","severity":1,"message":"63","line":169,"column":29,"nodeType":"64","endLine":169,"endColumn":71},{"ruleId":"62","severity":1,"message":"63","line":174,"column":29,"nodeType":"64","endLine":174,"endColumn":71},{"ruleId":"62","severity":1,"message":"63","line":179,"column":29,"nodeType":"64","endLine":179,"endColumn":71},{"ruleId":"65","severity":1,"message":"66","line":280,"column":19,"nodeType":"64","endLine":280,"endColumn":81},{"ruleId":"67","severity":1,"message":"68","line":42,"column":19,"nodeType":"64","endLine":42,"endColumn":72},{"ruleId":"69","severity":1,"message":"70","line":2,"column":16,"nodeType":"71","messageId":"72","endLine":2,"endColumn":26},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]